fn(plot(1:10))
data(ToothGrowth)   # loading data
which(ToothGrowth$supp="OJ")
which(ToothGrowth$supp=="OJ")
suppOJ = ToothGrowth[which(ToothGrowth$supp=="OJ")]
suppOJ = ToothGrowth[which(ToothGrowth$supp=="OJ"), ]
suppVC = ToothGrowth[which(ToothGrowth$supp=="VC"), ]
str(suppOJ)
str(suppVC)
difLength = suppVC - suppOJ;
difLength = suppVC$len - suppOJ$len;
difLength = suppVC$len - suppOJ$len
difLength
mean(difLength)
mean(difLength)+c(-1,1)*qnorm(.975)*sd(difLength)/sqrt(length(difLength))
t.test(difLength, paired=F)
t.test(-difLength, paired=F)
t.test(-difLength)
mean(difLength)
20.66333    -     16.96333
t.test(difLength, paired=F, var.equal = F)
?t.test
t.test(difLength, paired=T, var.equal = F)
str(suppOJ)
suppOJ
suppVC
?ToothGrowth
t.test(difLength)
t.test(suppVC$lenght, suppOJ$length, paired = T)    # option 2
t.test(suppVC$lenght, suppOJ$length, paired = TRUE)    # option 2
suppVC
t.test(suppVC$len, suppOJ$len, paired = TRUE)    # option 2
t.test(suppVC$len, suppOJ$len, paired = FALSE)    # option 2
?t.test
t.test(suppVC$len, suppOJ$len, paired = FALSE, conf.level=0.05)    # option 2
t.test(suppVC$len, suppOJ$len, paired = TRUE, conf.level=0.05)    # option 2
t.test(suppVC$len, suppOJ$len, paired = TRUE)    # option 2
t.test(suppVC$len, suppOJ$len, paired = TRUE, conf.level=0.95)    # option 2
t.test(1:10, y = c(7:20))      # P = .00001855
t.test(1:10, y = c(7:20, 200)) # P = .1245    -- NOT significant anymore
t.test(difLength)                             # option 1
?ToothGrowth
#### Influence of the Supplement type over the length inscrease
dose05_suppOJ <- suppOJ[(suppOJ$dose==0.5), ]
dose05_suppOJ
?ToothGrowth
table(ToothGrowth)
?t.test
a <- t.test(difLength)
str(a)
?ToothGrowth
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW <- mutate(wideCW,
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW <- mutate(wideCW,
)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW <- mutate(wideCW, gain=time21-time0)
?mutate
library(plyr)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW <- mutate(wideCW, gain=time21-time0)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight") names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "") library(dplyr)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW <- mutate(wideCW, gain=time21-time0)
wideCW
str(wideCW)
plot(wideCW)
ggplot(wideCW)
library(ggplot)
library(ggplot2)
ggplot(wideCW)
ggplot(wideCW, facet=diet)
ggplot(wideCW, x=time, y=gain, facet=diet)
ggplot(data=wideCW, x=time, y=gain, facet=diet)
?ggplot
ggplot(data=wideCW, aes(x=time, y=gain), facet=diet)
ggplot(data=wideCW, aes(x=time, y=gain))
?plot
str(wideCW)
ggplot(data=wideCW, aes(x=wideCW$time, y=wideCW$gain))
g<-ggplot(data=wideCW, aes(x=wideCW$time, y=wideCW$gain))
g
g<-g+geom_line()
g
g<-g+geom_line(size=2)
g
?facet_grid
g<-g+facet_grids(wideCW$diet)
g<-g+facet_grid(wideCW$diet)
g<-g+facet_grid(facets=wideCW$diet)
g<-g+facet_grid(.~wideCW$diet)
g
?facet_grid
g<-g+facet_grid(gain.~wideCW$diet)
g
g
rm(g)
g<-ggplot(data=wideCW, aes(x=wideCW$time, y=wideCW$gain))
g<-g+facet_grid(gain.~wideCW$diet)
g
g<-g+geom_line(size=2)
g
?facet_grid
g<-g+geom_point()
g
g<-g+facet_grid(wideCW$gain.~wideCW$diet)
g
?facet_grid
?ChickWeight
?t.test
qnorm(0.975)
qnorm(0.95)
qnorm(0.99)
qnorm(0.999)
n_new = n_old = 100
med_avg_new= 4
med_avg_old = 6
med_var_new = .5^2
med_var_old = 2^2
med_avg_between = med_avg_new - med_avg_old
df = ((med_var_new / n_new + med_var_old / n_old)^2) /
((med_var_new/n_new)^2/(n_new-1) + (med_var_old/n_old)^2/(n_old-1))
t = qt(p=.975,df=df)
-med_avg_between + c(-1,1)*sqrt(med_var_new/n_new + med_var_old/n_old)*t
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)
t=(x1-x2)/(spsq*sqrt(1/n1 + 1/n2))
2*pt(t,n1+n2-2)
swirl()
library(swirl)
swirl()
choose(5,3) * 0.8^3 * (0.2)^(5-3)
choose(5,3) * 0.8^3 * (0.2)^(5-3)+ choose(4,3) * 0.8^3 * (0.2)^(4-3)  +choose(3,3) * 0.8^3 * (0.2)^(3-3)
x=c(3,4,5); choose(5,x)*(.8)^x*(.2)^(5-x)
x=c(3,4,5); sum(choose(5,x)*(.8)^x*(.2)^(5-x))
pbinom(.8, 2, 5)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
?qnorm()
qnorm(10)
qnorm(.10)
0
qnorm(.975, mean=3, sd=""
)
qnorm(.975, mean=3, sd=2)
1.96*3+2
1.96*2+3
pnorm(1200, mean=1020, sd=50, lower.tail=false)
pnorm(1200, mean=1020, sd=50, lower.tail=F)
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm(1200, mean=1020, sd=50, lower.tail=TRUE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, 1020, 50, lower.tail=TRUE)
.53
.53
?ppois
ppois(3, 2.5, lower.tail=True, log.p=False)
ppois(3, 2.5, lower.tail=T, log.p=False)
ppois(3, 2.5, lower.tail=T, log.p=F)
ppois(3, 2.5*4, lower.tail=T, log.p=F)
ppois(3, 2.5*4)
?pbinom()
pbinom(5, 100, .01)
pbinom(5, 1000, .01)
ppois(5, 1000*0.01)
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference = g2-g1
difference <- g2-g1
mean(difference)
s <- sd(difference)
1.58 * c(-1, 1)*qt(.975, 9)*s/sqrt(9)
1.58 * c(-1, 1)*qt(.975, 9)*s/sqrt(10)
mn * c(-1, 1)*qt(.975, 9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$confi.int
t.test(difference)$conf.int
sp <-  (n_x-1)(S_x)^2+(n_y-1)(S_y)^2
n_x<-8; S_x<-15.34; n_y<-21; S_y<-18.23
sp <-  (n_x-1)(S_x)^2+(n_y-1)(S_y)^2
sp <- 7*15.34^2 + 20*18.23^2
ns<-27
sqrt(sp/ns)
sp<-sqrt(sp/ns)
ns
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
a
sp <- sqrt((9*var(g1)+9*var(g2))/18)
a
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2-g1, paired=F, var.equal=T)$conf
t.test(g2,g1, paired=F, var.equal=T)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
e
a
t.test(g2,g1,paired=TRUE)$conf
e
z
<
a
num <- (15.34^2/8 + 18.23^2/21)^2
a
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
qt(.975, mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
exit
bue
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child~parent, galton)
regrline
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic = fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor
cor(gpa_nor,gch_nor)
lm()
lm(a)
lm(dat)
lm(data)
lm(formula =)
0
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
linearMod <- lm(w~4)
linearMod <- lm(w~c)
linearMod <- lm(w~x)
linearMod
mu <- c(0.1471, 1.077, 0.3, 0.0025)
for (i in 1:length(w)){
mse <- sum(w[i]*(x[i] - mu[i])^2)
print(mse)
}
summary(linearMod)
min_nu <- sum(x*w) / sum(w)
final <- sum(w*(x-min_nu)^2)
c(min_nu, final)
?c
mu <- c(0.1471, 1.077, 0.3, 0.0025)
for (i in 1:length(w)){
mse <- sum(w[i]*(x[i] - mu[i])^2)
print(mse)
}
for (i in 1:length(w)){
mse <- sum(w[i]*(x[i] - mu[i])^2)
print(c(mu[i], mse)
}
for (i in 1:length(w)){
mse <- sum(w[i]*(x[i] - mu[i])^2)
print(c(mu[i], mse))
}
print(c(mu[i], "==>", mse))
for (i in 1:length(w)){
mse <- sum(w[i]*(x[i] - mu[i])^2)
print(c(mu[i], "==>", mse))
}
?print
print(c(mu[i], "==>", mse))
print(c(mu[i]:10, "==>", mse))
print(c(mu[i]:2, "==>", mse))
print(c(mu[i], "==>", mse))
linearMod <- lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
linearMod <- lm(y~x)
linearMod
linearMod$x
linearMod$coefficients
linearMod$coefficients[1]
linearMod$coefficients[2]
?lm
lm(y ~ 0 + x)
lm(y  + x)
lm(y ~  x)
lm(y ~  x - 1)
linearMod <- lm(y ~ 0 + x)  # linear model to remove an implied intercepted term
linearMod$coefficients[2]   # Get the slope
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
linearMod <- lm(y ~ 0 + x)  # linear model to remove an implied intercepted term
linearMod$coefficients[2]   # Get the slope
linearMod <- lm(y ~ 0 + x)  # linear model to remove an implied intercepted term
linearMod$coefficients
linearMod <- lm(y ~ 0 + x)  # linear model to remove an implied intercepted term
linearMod
linearMod <- lm(y ~ -1 + x)  # linear model to remove an implied intercepted term
linearMod
data(mtcars)
data(mtcars)
mtcars
str(mtcars)
regModel <- lm(mtcars$mpg ~ mtcars$weight)
regModel <- lm(mtcars$mpg ~ mtcars$wt)
regModel
load(cars)
library(cars)
library(mtcars)
?mtcars
data(mtcars)
summary(mtcars)
summary(mtcars$am)
(mtcars$am)
desc(mtcars$am)
?summary
str(mtcars$am)
summary.lm(mtcars)
summary.lm()
str(mtcars)
summary(mtcars$mpg)
data(mtcars)
plot(mtcars$mpg, mtcars$am)
plot(mtcars$am, mtcars$mpg)
boxplot(mtcars$am, mtcars$mpg)
?boxplot
summary(mtcars$mpg)
summary(mtcars[mtcars$am=0]$mpg)
summary(mtcars[mtcars$am=1]$mpg)
summary(mtcars$mpg)
summary(mtcars[mtcars$am==0]$mpg)
summary(mtcars[mtcars$am==1]$mpg)
summary(mtcars$mpg)
summary(mtcars[mtcars$am==0]$mpg)
summary(mtcars[mtcars$am==1]$mpg)
(mtcars[mtcars$am==1]$mpg)
(mtcars[mtcars$am=='1']$mpg)
mtcars$am
mtcars$am==1
mtcars[mtcars$am==1]
mtcars[mtcars$am==1]$am
mtcars[is.True(mtcars$am==1)]
is.ture
is.true
?is.true
?true
mtcars$am <- as.factor(mtcar$am)
mtcars$am <- as.factor(mtcars$am)
boxplot(mtcars$am, mtcars$mpg)
mtcars$am <- as.factor(mtcar$am)boxplot(mpg ~ am, data = mtcars, col = "salmon",
xlab="Transmission", ylab = "miles per gallon")
mtcars$am <- as.factor(mtcars$am)
?as.factor
mtcars$am <- as.factor(mtcars$am.)
mtcars$am <- as.factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am <- as.factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
boxplot(mtcars$am, mtcars$mpg)
str(mtcars$am)
data(mtcars)
mtars
mtcars
?mtcars
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
str(mtcars$am)
mtcars$am <- as.factor(mtcars$am, labels=c("Automatic", "Manual"))
factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am
?mtcarsboxplot(mpg ~ am, data = mtcars, col = "salmon",
xlab="Transmission", ylab = "miles per gallon")
boxplot(mpg ~ am, data = mtcars, col = "salmon",
xlab="Transmission", ylab = "miles per gallon")
str(mtcars)
summary(mtcars$mpg)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
summary(mtcars[mtcars$am="Automatic"]$mpg)
summary(mtcars[mtcars$am="Automatic"]$mpg)
mtcars[mtcars$am="Automatic"]$mpg
mtcars$am="Automatic"
mtcars$am=="Automatic"
data(mtcars)
str(mtcars)
summary(mtcars$mpg)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
summary(mtcars[mtcars$am=="Automatic"]$mpg)
summary(mtcars[mtcars$am=="Automatic"]$mpg)
[mtcars$am=="Automatic"]
mtcars$am=="Automatic"
mtcars(mtcars$am=="Automatic")
mtcars[mtcars$am=="Automatic"]
mtcars[is.True(mtcars$am=="Automatic")]
?is.Nan
?is.NaN
mtcars[(mtcars$am=="Automatic")==True]
mtcars[(mtcars$am=="Automatic")==T]
mtcars[which(mtcars$am=="Automatic")==T]
mtcars[which(mtcars$am=="Automatic")==True]
mtcars$am=="Automatic")
mtcars$am=="Automatic"
mtcars[which(mtcars$am=="Automatic")==TRUE]
mtcars[which(mtcars$am=="Automatic")=="TRUE"]
which(mtcars$am=="Automatic")=="TRUE"
which(mtcars$am=="Automatic")
mtcars[which(mtcars$am=="Automatic")]$mpg
mtcars[which(mtcars$am=="Automatic")]$am
mtcars[which(mtcars$am=="Automatic"), ]$am
mtcars[which(mtcars$am=="Automatic"), ]$mpg
summary(mtcars[mtcars$am=="Automatic", ]$mpg)
data(mtcars)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
str(mtcars)
summary(mtcars$mpg)
summary(mtcars[mtcars$am=="Automatic", ]$mpg)
summary(mtcars[mtcars$am=="Manual", ]$mpg)
str(mtcars)
automaticCars <- mtcars[mtcars$am=="Automatic", ]
manualCars <- mtcars[mtcars$am=="Manual", ]
summary(mtcars$mpg)
summary(automaticCars$mpg)
summary(manualCars$mpg)
?t.test
lm(mpg ~ am, data = mtcars)
lm(mpg ~ am -a, data = mtcars)
lm(mpg ~ am -1, data = mtcars)
summary(lm(mpg ~ am -1, data = mtcars))
summary( lm(mpg ~ 0 + am, data = mtcars) )
?mtcars
lm(mpg ~ am + gear + wt + hp + cyl + carb, data = mtcars)
summary(lm(mpg ~ am + gear + wt + hp + cyl + carb, data = mtcars))
a <- lm(mpg ~ am + gear + wt + hp + cyl + carb, data = mtcars)
a
str(a)
str(a$mse)
str(a$gear)
str(a$model)
str(a$ml)
str(a$df.residual)
str(a$contrasts)
str(a$contrasts$am)
str(a$terms)
str(a$terms[1])
str(a$terms[2])
?mtcars
plot(simpleModel)
simpleModel <- lm(mpg ~ am, data = mtcars)
plot(simpleModel)
?t.test
with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, data = sleep)
lm(mpg ~ 0 + am, data = mtcars)
lm(mpg ~ am, data = mtcars
)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/GitHub/Coursera-DataScienceSpecialization/09_DevelopingDataProducts/project/mtcars")
library(slidify)
